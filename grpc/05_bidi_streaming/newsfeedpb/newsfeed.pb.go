// Code generated by protoc-gen-go. DO NOT EDIT.
// source: newsfeedpb/newsfeed.proto

package newsfeedpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FindMaximumLikeRequest struct {
	Number               int32    `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindMaximumLikeRequest) Reset()         { *m = FindMaximumLikeRequest{} }
func (m *FindMaximumLikeRequest) String() string { return proto.CompactTextString(m) }
func (*FindMaximumLikeRequest) ProtoMessage()    {}
func (*FindMaximumLikeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d722b1f49019b149, []int{0}
}

func (m *FindMaximumLikeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindMaximumLikeRequest.Unmarshal(m, b)
}
func (m *FindMaximumLikeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindMaximumLikeRequest.Marshal(b, m, deterministic)
}
func (m *FindMaximumLikeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindMaximumLikeRequest.Merge(m, src)
}
func (m *FindMaximumLikeRequest) XXX_Size() int {
	return xxx_messageInfo_FindMaximumLikeRequest.Size(m)
}
func (m *FindMaximumLikeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindMaximumLikeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindMaximumLikeRequest proto.InternalMessageInfo

func (m *FindMaximumLikeRequest) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

type FindMaximumLikeResponse struct {
	Maximum              int32    `protobuf:"varint,1,opt,name=maximum,proto3" json:"maximum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindMaximumLikeResponse) Reset()         { *m = FindMaximumLikeResponse{} }
func (m *FindMaximumLikeResponse) String() string { return proto.CompactTextString(m) }
func (*FindMaximumLikeResponse) ProtoMessage()    {}
func (*FindMaximumLikeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d722b1f49019b149, []int{1}
}

func (m *FindMaximumLikeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindMaximumLikeResponse.Unmarshal(m, b)
}
func (m *FindMaximumLikeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindMaximumLikeResponse.Marshal(b, m, deterministic)
}
func (m *FindMaximumLikeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindMaximumLikeResponse.Merge(m, src)
}
func (m *FindMaximumLikeResponse) XXX_Size() int {
	return xxx_messageInfo_FindMaximumLikeResponse.Size(m)
}
func (m *FindMaximumLikeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindMaximumLikeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindMaximumLikeResponse proto.InternalMessageInfo

func (m *FindMaximumLikeResponse) GetMaximum() int32 {
	if m != nil {
		return m.Maximum
	}
	return 0
}

func init() {
	proto.RegisterType((*FindMaximumLikeRequest)(nil), "newsfeed.FindMaximumLikeRequest")
	proto.RegisterType((*FindMaximumLikeResponse)(nil), "newsfeed.FindMaximumLikeResponse")
}

func init() { proto.RegisterFile("newsfeedpb/newsfeed.proto", fileDescriptor_d722b1f49019b149) }

var fileDescriptor_d722b1f49019b149 = []byte{
	// 168 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xcc, 0x4b, 0x2d, 0x2f,
	0x4e, 0x4b, 0x4d, 0x4d, 0x29, 0x48, 0xd2, 0x87, 0x31, 0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85,
	0x38, 0x60, 0x7c, 0x25, 0x03, 0x2e, 0x31, 0xb7, 0xcc, 0xbc, 0x14, 0xdf, 0xc4, 0x8a, 0xcc, 0xdc,
	0xd2, 0x5c, 0x9f, 0xcc, 0xec, 0xd4, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x31, 0x2e,
	0xb6, 0xbc, 0xd2, 0xdc, 0xa4, 0xd4, 0x22, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xd6, 0x20, 0x28, 0x4f,
	0xc9, 0x98, 0x4b, 0x1c, 0x43, 0x47, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x90, 0x04, 0x17, 0x7b,
	0x2e, 0x44, 0x18, 0xaa, 0x07, 0xc6, 0x35, 0xca, 0xe7, 0xe2, 0xf7, 0x83, 0x5a, 0x19, 0x9c, 0x5a,
	0x54, 0x96, 0x99, 0x9c, 0x2a, 0x14, 0xc3, 0xc5, 0x8f, 0x66, 0x8e, 0x90, 0x82, 0x1e, 0xdc, 0x9d,
	0xd8, 0x1d, 0x25, 0xa5, 0x88, 0x47, 0x05, 0xc4, 0x11, 0x4a, 0x0c, 0x1a, 0x8c, 0x06, 0x8c, 0x4e,
	0x3c, 0x51, 0x5c, 0x08, 0xef, 0x27, 0xb1, 0x81, 0xbd, 0x6d, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff,
	0x0c, 0x9f, 0x2a, 0x92, 0x13, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NewsfeedServiceClient is the client API for NewsfeedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NewsfeedServiceClient interface {
	// BiDi Streaming
	FindMaximumLike(ctx context.Context, opts ...grpc.CallOption) (NewsfeedService_FindMaximumLikeClient, error)
}

type newsfeedServiceClient struct {
	cc *grpc.ClientConn
}

func NewNewsfeedServiceClient(cc *grpc.ClientConn) NewsfeedServiceClient {
	return &newsfeedServiceClient{cc}
}

func (c *newsfeedServiceClient) FindMaximumLike(ctx context.Context, opts ...grpc.CallOption) (NewsfeedService_FindMaximumLikeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NewsfeedService_serviceDesc.Streams[0], "/newsfeed.NewsfeedService/FindMaximumLike", opts...)
	if err != nil {
		return nil, err
	}
	x := &newsfeedServiceFindMaximumLikeClient{stream}
	return x, nil
}

type NewsfeedService_FindMaximumLikeClient interface {
	Send(*FindMaximumLikeRequest) error
	Recv() (*FindMaximumLikeResponse, error)
	grpc.ClientStream
}

type newsfeedServiceFindMaximumLikeClient struct {
	grpc.ClientStream
}

func (x *newsfeedServiceFindMaximumLikeClient) Send(m *FindMaximumLikeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *newsfeedServiceFindMaximumLikeClient) Recv() (*FindMaximumLikeResponse, error) {
	m := new(FindMaximumLikeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NewsfeedServiceServer is the server API for NewsfeedService service.
type NewsfeedServiceServer interface {
	// BiDi Streaming
	FindMaximumLike(NewsfeedService_FindMaximumLikeServer) error
}

// UnimplementedNewsfeedServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNewsfeedServiceServer struct {
}

func (*UnimplementedNewsfeedServiceServer) FindMaximumLike(srv NewsfeedService_FindMaximumLikeServer) error {
	return status.Errorf(codes.Unimplemented, "method FindMaximumLike not implemented")
}

func RegisterNewsfeedServiceServer(s *grpc.Server, srv NewsfeedServiceServer) {
	s.RegisterService(&_NewsfeedService_serviceDesc, srv)
}

func _NewsfeedService_FindMaximumLike_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NewsfeedServiceServer).FindMaximumLike(&newsfeedServiceFindMaximumLikeServer{stream})
}

type NewsfeedService_FindMaximumLikeServer interface {
	Send(*FindMaximumLikeResponse) error
	Recv() (*FindMaximumLikeRequest, error)
	grpc.ServerStream
}

type newsfeedServiceFindMaximumLikeServer struct {
	grpc.ServerStream
}

func (x *newsfeedServiceFindMaximumLikeServer) Send(m *FindMaximumLikeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *newsfeedServiceFindMaximumLikeServer) Recv() (*FindMaximumLikeRequest, error) {
	m := new(FindMaximumLikeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _NewsfeedService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "newsfeed.NewsfeedService",
	HandlerType: (*NewsfeedServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FindMaximumLike",
			Handler:       _NewsfeedService_FindMaximumLike_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "newsfeedpb/newsfeed.proto",
}
